vector

// 사용하면 안될 때
- 유동적으로 자료의 크기가 변하는 개념에서 vector는 직관성이 떨어진다.
- 자료가 한번 추가되면 그 자료를 삭제하는 것이 어렵고 힘들다.
- 따라서 삭제가 빈번하게 일어나는 경우 비추천

// 사용하면 좋을 때
- 임의접근이 필요 할 때

ex) 
ConsoleObject로 갤러그를 만들려고 했을때 총알과 몬스터의 
생성과 소멸이 매우 빈번하게 발생하여 직관성이 떨어졌다.


list
// 사용하면 안될 때
- 임의접근이 필요 할 때

// 사용하면 좋을 때
- 삭제와 삽입이 빈번하게 일어나는 경우


map
// 사용하면 안될 때
- 메모리 효율이 별로 안좋다.

// 사용하면 좋을 때
- 탐색과 정렬에 특화되어 있는 자료구조 (근데 막상 벡터랑 비교하면 벡터가 빠른경우가 많다.)

   